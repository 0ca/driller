68a69
>           *driller_path,              /* Location of driller executable   */
74a76
>           *target_binary_path,        /* Path to target binary, not qemu  */
156c158,159
<            blocks_eff_select;         /* Blocks selected as fuzzable      */
---
>            blocks_eff_select,         /* Blocks selected as fuzzable      */
>            driller_invokations;       /* Number of driller invokations    */
1245c1248
< static void read_testcases(void) {
---
> static void read_testcases(char *in_dir) {
3950a3954,3955
> 
> 
3982c3987,3992
<   SAYF(bV bSTOP "        trim : " cNOR "%-37s " bSTG bVR bH20 bH2 bH2 bRB "\n"
---
>   //SAYF(bV bSTOP "        trim : " cNOR "%-37s " bSTG bVR bH20 bH2 bH2 bRB "\n"
>   //     bLB bH30 bH20 bH2 bH bRB bSTOP cRST RESET_G1, tmp);
> 
> 
>   sprintf(tmp, "%s", DI(driller_invokations));
>   SAYF(bV bSTOP "     driller : " cNOR "%-37s " bSTG bVR bH20 bH2 bH2 bRB "\n"
3984a3995
> 
7259a7271,7308
> /* Functions for driller */
> void invoke_driller(void)
> {
>     pid_t driller_pid;
>     int status = 0;
>     char *argv[5];
> 
>     printf("[!] driller being invoked!\n");
> 
>     argv[0] = driller_path;
>     argv[1] = target_binary_path;
>     argv[2] = alloc_printf("%s/queue", out_dir);
>     argv[3] = "driller_output";
>     argv[4] = NULL;
> 
> 
>     driller_pid = fork();
>     if (driller_pid == 0)
>     {
>         execve(driller_path, argv, environ);
>         exit(1); 
>     }
> 
>     if (driller_pid < 0)
>     {
>         perror("failed to invoke driller");
>     }  
>     else
>     {
>         if (waitpid(driller_pid, &status, 0) != driller_pid)
>         {
>             perror("waitpid");
>         }
>         /* everything in driller_output get's added to the queue */
>         read_testcases("driller_output");
>         driller_invokations++;
>     }  
> }
7277c7326
<   while ((opt = getopt(argc, argv, "+i:o:f:m:t:T:dnCB:S:M:x:Q")) > 0)
---
>   while ((opt = getopt(argc, argv, "+i:o:D:f:m:t:T:dnCB:S:M:x:Q")) > 0)
7295a7345,7350
>       case 'D': /* driller */
> 
>         if (driller_path) FATAL("Multiple -D options not supported");
>         driller_path = optarg;
>         break;
> 
7473c7528
<   read_testcases();
---
>   read_testcases(in_dir);
7489a7545
>   target_binary_path = argv[optind];
7558a7615,7622
> 
>     /* when AFL goes blue we invoke driller */
>     if (cycles_wo_finds > 0 && unique_crashes == 0)
>     {
>         invoke_driller();
>         cycles_wo_finds = 0;
>         printf("\e[1;1H\e[2J"); // clear screen
>     } 
